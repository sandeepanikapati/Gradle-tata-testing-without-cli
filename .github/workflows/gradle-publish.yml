name: Interaction -test
on: [push, pull_request]
jobs:
  # sonarQubeTrigger:
  #   name: SonarQube Trigger
  #   runs-on: aws-runner
  #   steps:
  #   - name: Chekingout code repo
  #     uses: actions/checkout@v2
  #   - name: SONAR SCAN starts
  #     run: |
  #      pwd
  #      cd /home/ciadmin/actions-runner/_work/github-actions-POC/github-actions-POC
  #      pwd
  #      ./gradlew sonarqube -Dsonar.projectKey=interaction-service -Dsonar.host.url=http://10.21.5.10:9000/sonar -Dsonar.login=${{ secrets.INTERACTION_TOKEN }}
       
  build:
    runs-on: ubuntu-latest
    outputs:
        output1: ${{ steps.repo_var.outputs.var }}  
    steps:
      - uses: actions/checkout@v2
      - name: Set repo variable
        run: |
          op=$(basename $(git remote show -n origin | grep Fetch | cut -d: -f2-))
          echo "repo_v=$op" >> $GITHUB_ENV
      - id: repo_var
        run: echo "::set-output name=var::${{ env.repo_v }}"   
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Build with Gradle
        run: gradle build
      - name: jfrog cli setup
        uses: jfrog/setup-jfrog-cli@v2
      # - name: Jfrog cli deploy  
      #   run: |
      #     # Ping the server
      #     jfrog rt ping
      #- uses: jfrog/setup-jfrog-cli@v2
        env:
      #    artifactory_user: ${{ secrets.ARTIFACTORY_USER }}
      #    artifactory_password: ${{ secrets.ARTIFACTORY_PASSWORD }}  
           JF_ARTIFACTORY_1: ${{ secrets.HARISH_CLI_GITHUB_ACTIONS }}
      #- run: |
      #    jfrog rt gradlec --global --server-id-resolve=tataunistoreartifact --server-id-deploy=tataunistoreartifact --repo-resolve=beaute-gradle-dev --repo-deploy=beaute-gradle-dev-local
      #
      #   run: gradle deploy
      #   env: 
      #     artifactory_user: ${{ secrets.ARTIFACTORY_USER }}
      #     artifactory_password: ${{ secrets.ARTIFACTORY_PASSWORD }}  
      #- name: Publish to Jfrog
      #  run: |
      #    jfrog rt gradle clean artifactoryPublish -b . --build-name=interaction-service --build-number=1234
      #    jfrog rt bp --build-name=interaction-service --build-number=1234
      #  env:
      #    artifactory_user: ${{ secrets.ARTIFACTORY_USER }}
      #    artifactory_password: ${{ secrets.ARTIFACTORY_PASSWORD }}  
      #     JF_ARTIFACTORY_1: ${{ secrets.HARISH_CLI_GITHUB_ACTIONS }}      
      - uses: actions/upload-artifact@master
        with:
          name: sbuild-artifact
          path: /home/runner/work/${{ env.repo_v }}/${{ env.repo_v }}/build/libs 
  # ImageUploadTag:
  #   needs: build
  #   outputs:
  #       output2: ${{ steps.repo_var.outputs.var }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - run: echo "repo_v=${{needs.build.outputs.output1}}" >> $GITHUB_ENV
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.ACCESS_KEY_QA1 }}
  #         aws-secret-access-key: ${{ secrets.SECRET_KEY_QA1 }}
  #         aws-region: ap-south-1
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
  #     - name: build-artifact
  #       uses: actions/download-artifact@master
  #       with:
  #         name: build-artifact
  #         path: /home/runner/work/${{ env.repo_v }}/${{ env.repo_v }}/build/libs  
  #     - id: repo_var
  #       run: echo "::set-output name=var::${{ env.repo_v }}"
  #     - name: Create ECR repo if missing
  #       uses: byu-oit/github-action-create-ecr-repo-if-missing@v1
  #       with:
  #         DOCKER_REPO_NAME: ${{ env.repo_v }}
  #     - name: Build, tag, and push image to Amazon ECR
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: ${{ env.repo_v }}
  #         IMAGE_TAG: ${{ github.sha }}
  #       run: |
  #         pwd
  #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #         echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  # Deploy:
  #   needs: ImageUploadTag
  #   name: ChartDeployment
  #   runs-on: aws-runner
  #   steps: 
  #   - name: Chekingout code repo
  #     uses: actions/checkout@v2
  #     with:
  #       repository: tcs-chennai/beauty-chart
  #       ref: main
  #       token: ${{ secrets.SSH_KEY }}
  #       path: beauty-chart
  #   - run: echo "repo_v=${{needs.ImageUploadTag.outputs.output2}}" >> $GITHUB_ENV
  #   - name: Copying helm properties for deployment
  #     run: |
  #      cp /home/ciadmin/actions-runner/_work/${{ env.repo_v }}/${{ env.repo_v }}/charts/* /home/ciadmin/actions-runner/_work/${{ env.repo_v }}/${{ env.repo_v }}/beauty-chart/beauty-chart
  #      latesttag=`aws ecr describe-images --repository-name ${{ env.repo_v }} --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]'`
  #      sed -i "s/Image_tag/$latesttag/g" /home/ciadmin/actions-runner/_work/${{ env.repo_v }}/${{ env.repo_v }}/beauty-chart/beauty-chart/values.yaml
  #      sed -i "s/repo_name/${{ env.repo_v }}/g" /home/ciadmin/actions-runner/_work/${{ env.repo_v }}/${{ env.repo_v }}/beauty-chart/beauty-chart/values.yaml 
  #      vb_value=`aws ecr describe-image-scan-findings --repository-name ${{ env.repo_v }} --image-id imageTag=$latesttag --region ap-south-1 | jq .imageScanFindings.findings`
  #      echo "vb_check=$vb_value" >> $GITHUB_ENV
  #   - name: Vulnerability SCAN:PASS
  #     if: ${{ env.vb_check =='[]'}}
  #     run: |
  #       echo "No Vulnerability found"      
  #   - name: Vulnerability SCAN:FAILED
  #     if: ${{ env.vb_check !='[]'}}
  #     run: |
  #       echo "Vulnerability detected, failing job" 
  #       exit 1
  #   - name: Lint Check
  #     run: helm lint ./beauty-chart/beauty-chart/
  #   - name: Deploy Chart 
  #     run: helm install interaction ./beauty-chart/beauty-chart/ 
